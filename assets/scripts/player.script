local GRAVITY = -64
local WALK_SPEED = 512
local JUMP_HEIGHT = 1536 
local MAX_JUMP_AMOUNT = 1
local GEM_IDS = {
	hash("/gem_a"),
	hash("/gem_b")
}
local GEM_COLOURS = 
{
	"파란색",
	"초록색",
	"빨간색",
	"노란색"
}

function init(self)
	self.velocity = vmath.vector3()
	self.is_falling = false
	self.current_jump_amount = 0
	self.score = 0
	self.game_over = false
	math.randomseed(os.time())
	setup_gems(self)
	msg.post("#", "acquire_input_focus")
end

function fixed_update(self, dt)
	self.velocity.y = math.max(self.velocity.y + GRAVITY)

	if self.velocity.y ~= GRAVITY and not self.is_falling then
		sprite.play_flipbook("#sprite", "jump")
		self.is_falling = true
	end
	
	if self.velocity.y < -1280 then
		self.velocity.y = -920
	end

	if go.get_position().y < 0 then
		reset_position()
	end

	if self.score >= 10 then
		self.velocity.x = 0
		if not self.game_over then
			msg.post("/gui#gui", "win")
			sprite.play_flipbook("#sprite", "idle")
			self.game_over = true
		end
	end
	
	update_position(self.velocity * dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") and message.enter then
		if message.other_id == self.objective_gem_id then
			self.score = self.score + 1

			if self.score < 10 then
				sound.play("#correct")
			else
				sound.play("#win")
			end
		else
			self.score = self.score - 1
			sound.play("#incorrect")
		end
		
		msg.post("/gui#gui", "update_gui", {
			score = self.score,
			objective_gem_colour = self.objective_gem_colour
		})

		setup_gems(self)
		reset_position()
	end
	
	if message_id == hash("contact_point_response") and message.normal.y == 1 then
		self.velocity.y = 0

		if self.is_falling then
			self.is_falling = false
			self.current_jump_amount = 0
			sound.play("#land")
			sprite.play_flipbook("#sprite", self.velocity.x == 0 and "idle" or "walk")
		end
		
		update_position(vmath.vector3(0, message.distance, 0))
	end
end

function on_input(self, action_id, action)
	if not self.game_over then
		if action_id == hash("space") and action.pressed and self.current_jump_amount < MAX_JUMP_AMOUNT and not self.is_falling then
			self.velocity.y = self.velocity.y + JUMP_HEIGHT
			self.current_jump_amount = self.current_jump_amount + 1
			sound.play("#jump")
			update_position(vmath.vector3(0, 2, 0))
		end
		
		if action.released and (action_id == hash("left") or action_id == hash("right")) then
			travel(self, 0, "idle")
		elseif action_id == hash("left") and action.pressed then
			travel(self, -WALK_SPEED, "walk")
			sprite.set_hflip("#sprite", true)
		elseif action_id == hash("right") and action.pressed then
			travel(self, WALK_SPEED, "walk")
			sprite.set_hflip("#sprite",false)
		end
	end
end

function update_position(vector_3)
	go.set_position(go.get_position() + vector_3)
end

function travel(self, velocity_x, animation_id)
	self.velocity.x = velocity_x
	
	if not self.is_falling then
		sprite.play_flipbook("#sprite", animation_id)
	end
end

function setup_gems(self)
	self.objective_gem_id = GEM_IDS[math.random(#GEM_IDS)]
	self.objective_gem_colour = GEM_COLOURS[math.random(#GEM_COLOURS)]
	local other_gem_colour = GEM_COLOURS[math.random(#GEM_COLOURS)]

	while self.objective_gem_colour == other_gem_colour do
		other_gem_colour = GEM_COLOURS[math.random(#GEM_COLOURS)]
	end

	if self.objective_gem_id == GEM_IDS[1] then
		msg.post(GEM_IDS[2], other_gem_colour)
	else
		msg.post(GEM_IDS[1], other_gem_colour)
	end

	msg.post(self.objective_gem_id, self.objective_gem_colour)
	msg.post("/gui#gui", "update_gui", {
		score = self.score,
		objective_gem_colour = self.objective_gem_colour
	})
end

function reset_position()
	go.set_position(vmath.vector3(512, 384, 1))
end